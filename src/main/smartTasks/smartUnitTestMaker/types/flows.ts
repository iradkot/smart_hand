// src/main/smartTasks/smartUnitTestMaker/types/flows.ts

export interface ImportEntry {
  source: string; // e.g., 'react'
  raw: string;    // raw import line
}

export interface MockDefinition {
  modulePath: string;     // Path to the module being mocked
  mockPath: string;       // Path to the mock file
  isAutoGenerated: boolean; // Whether this mock was auto-generated
  dependencies?: string[]; // Any dependencies needed by this mock
}

export interface FileAnalysisResult {
  imports: ImportEntry[];
  isReactComponent?: boolean;
  requiredMocks?: MockDefinition[]; // Add information about required mocks
  complexImports?: boolean;  // Flag if AI assistance needed for import analysis
  needsAIAnalysis?: boolean; // Flag if further AI analysis is needed
}

export interface LlmClassificationResult {
  fileType: string;      // e.g. "ReactComponent", "NodeUtility"
  mocksNeeded: string[]; // e.g. ["axios", "./someLocalFile"]
  suggestedMockContent?: { [key: string]: string }; // AI suggestions for mock content
  complexityLevel?: number; // Indicates how complex the mocking needs are
  customMockingStrategy?: string; // Special instructions for complex mocking
}

export interface TestGenerationResult {
  testFileName: string;
  testCode: string;
  generatedMocks?: MockDefinition[]; // Track any mocks that were generated
  needsAIReview?: boolean; // Flag if generated test needs AI review
  mockGenerationSteps?: string[]; // Track the steps needed for mock generation
  validationPoints?: string[]; // Points where validation is needed
}

export interface TestResult {
  success: boolean;
  errorMessage?: string;
  details?: any; // store jest or mocha test details, if you like
  needsAIAssistance?: boolean; // Flag if error needs AI analysis
  complexFailure?: boolean;    // Flag if failure is complex
  suggestedFixes?: string[];   // AI-suggested fixes
}

export interface FileAnalysisParams {
  directoryPath: string;
  fileName: string;
}

export interface ClassificationParams {
  sessionId: string;
  fileContent: string;
  analysis: FileAnalysisResult;
}

export interface TestGenerationParams {
  sessionId: string;
  directoryPath: string;
  fileName: string;
  fileContent: string;
  classification: LlmClassificationResult;
}

export interface TestExecutionParams {
  packageManager: string;
  directoryPath: string;
  testFileName: string;
  mockPaths?: string[]; // Add support for mock paths
}

export interface FailureFixParams {
  sessionId: string;
  directoryPath: string;
  testFileName: string;
  lastError: string;
  packageManager: string;
}
